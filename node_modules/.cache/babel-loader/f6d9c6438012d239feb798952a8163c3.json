{"ast":null,"code":"import { GET_USER, USER_LOGOUT } from './types';\nexport const userLogin = () => dispatch => {\n  let empty_user = {};\n  fetch(\"http://localhost:3000/auth/login/success\", {\n    method: \"GET\",\n    credentials: \"include\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Credentials\": true\n    }\n  }).then(res => res.json()).then(data => {\n    //    console.log(data.user);\n    dispatch({\n      type: GET_USER,\n      payload: data.user || empty_user\n    });\n  });\n};\nexport const userLogout = () => dispatch => {\n  fetch('http://localhost:3000/logout').then(res => res.json()).then(data => dispatch({\n    type: USER_LOGOUT,\n    payload: data.user\n  }));\n};\nexport const showAuthWindow = options => {\n  const left = window.screen.width / 2 - 250;\n  const top = window.screen.height / 2 - 300;\n  options.windowName = options.windowName || 'ConnectWithOAuth'; // should not include space for IE\n\n  options.windowOptions = options.windowOptions || `location=0,status=0,width=500,height=600, top=${top}, left=${left}`;\n\n  options.callback = options.callback || function () {\n    window.location.reload();\n  }; // var that = this;\n\n\n  let oauthWindow = window.open(options.path, options.windowName, options.windowOptions);\n  let oauthInterval = window.setInterval(async function () {\n    let json = await fetch(\"http://localhost:3000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    });\n    let result = await json.json();\n\n    if (result.user) {\n      window.clearInterval(oauthInterval);\n      options.callback();\n      return oauthWindow.close();\n    }\n\n    if (oauthWindow.closed) {\n      options.callback();\n    }\n  }, 1000);\n};","map":{"version":3,"sources":["/Users/apple/Dropbox/My Mac (zaytsev.local)/Documents/mapbox/src/actions/userActions.js"],"names":["GET_USER","USER_LOGOUT","userLogin","dispatch","empty_user","fetch","method","credentials","headers","Accept","then","res","json","data","type","payload","user","userLogout","showAuthWindow","options","left","window","screen","width","top","height","windowName","windowOptions","callback","location","reload","oauthWindow","open","path","oauthInterval","setInterval","result","clearInterval","close","closed"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,SAApC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAMC,QAAQ,IAAI;AACvC,MAAIC,UAAU,GAAG,EAAjB;AACAC,EAAAA,KAAK,CAAC,0CAAD,EAA6C;AAC9CC,IAAAA,MAAM,EAAE,KADsC;AAE9CC,IAAAA,WAAW,EAAE,SAFiC;AAG9CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB,kBAFT;AAGP,0CAAoC;AAH7B;AAHqC,GAA7C,CAAL,CASKC,IATL,CASUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EATjB,EAUKF,IAVL,CAUUG,IAAI,IAAG;AACb;AACIV,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEd,QADD;AAELe,MAAAA,OAAO,EAAEF,IAAI,CAACG,IAAL,IAAaZ;AAFjB,KAAD,CAAR;AAGG,GAfX;AAiBH,CAnBM;AAqBP,OAAO,MAAMa,UAAU,GAAG,MAAMd,QAAQ,IAAI;AACxCE,EAAAA,KAAK,CAAC,8BAAD,CAAL,CACKK,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IACNV,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEb,WADD;AAELc,IAAAA,OAAO,EAAEF,IAAI,CAACG;AAFT,GAAD,CAHhB;AAQH,CATM;AAWP,OAAO,MAAME,cAAc,GAAIC,OAAD,IAAa;AAGnC,QAAMC,IAAI,GAAIC,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAoB,CAArB,GAAwB,GAArC;AACA,QAAMC,GAAG,GAAIH,MAAM,CAACC,MAAP,CAAcG,MAAd,GAAqB,CAAtB,GAAyB,GAArC;AACAN,EAAAA,OAAO,CAACO,UAAR,GAAqBP,OAAO,CAACO,UAAR,IAAuB,kBAA5C,CALmC,CAK6B;;AAChEP,EAAAA,OAAO,CAACQ,aAAR,GAAwBR,OAAO,CAACQ,aAAR,IAA0B,iDAAgDH,GAAI,UAASJ,IAAK,EAApH;;AACAD,EAAAA,OAAO,CAACS,QAAR,GAAmBT,OAAO,CAACS,QAAR,IAAoB,YAAU;AAAEP,IAAAA,MAAM,CAACQ,QAAP,CAAgBC,MAAhB;AAA2B,GAA9E,CAPmC,CAQnC;;;AACA,MAAIC,WAAW,GAAGV,MAAM,CAACW,IAAP,CAAYb,OAAO,CAACc,IAApB,EAA0Bd,OAAO,CAACO,UAAlC,EAA8CP,OAAO,CAACQ,aAAtD,CAAlB;AACA,MAAIO,aAAa,GAAGb,MAAM,CAACc,WAAP,CAAmB,kBAAgB;AACnD,QAAIvB,IAAI,GAAG,MAAMP,KAAK,CAAC,0CAAD,EAA6C;AAC/DC,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,WAAW,EAAE,SAFkD;AAG/DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB,kBAFT;AAGP,4CAAoC;AAH7B;AAHsD,KAA7C,CAAtB;AASA,QAAI2B,MAAM,GAAG,MAAMxB,IAAI,CAACA,IAAL,EAAnB;;AACA,QAAGwB,MAAM,CAACpB,IAAV,EAAgB;AACZK,MAAAA,MAAM,CAACgB,aAAP,CAAqBH,aAArB;AACAf,MAAAA,OAAO,CAACS,QAAR;AACA,aAAQG,WAAW,CAACO,KAAZ,EAAR;AACH;;AACF,QAAGP,WAAW,CAACQ,MAAf,EAAsB;AAErBpB,MAAAA,OAAO,CAACS,QAAR;AACA;AAEH,GArBmB,EAqBjB,IArBiB,CAApB;AAuBP,CAjCM","sourcesContent":["import {GET_USER, USER_LOGOUT} from './types';\n\nexport const userLogin = () => dispatch => {\n    let empty_user = {}\n    fetch(\"http://localhost:3000/auth/login/success\", {\n        method: \"GET\",\n        credentials: \"include\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Credentials\": true\n        }\n      })\n        .then(res => res.json())\n        .then(data =>{\n        //    console.log(data.user);\n            dispatch({\n                type: GET_USER,\n                payload: data.user || empty_user\n            })}\n        );\n};\n\nexport const userLogout = () => dispatch => {\n    fetch('http://localhost:3000/logout')\n        .then(res => res.json())\n        .then(data =>\n            dispatch({\n                type: USER_LOGOUT,\n                payload: data.user\n            })\n        );\n};\n\nexport const showAuthWindow = (options) => {\n\n  \n        const left = (window.screen.width/2)-250;\n        const top = (window.screen.height/2)-300;\n        options.windowName = options.windowName ||  'ConnectWithOAuth'; // should not include space for IE\n        options.windowOptions = options.windowOptions || `location=0,status=0,width=500,height=600, top=${top}, left=${left}`;\n        options.callback = options.callback || function(){ window.location.reload(); };\n        // var that = this;\n        let oauthWindow = window.open(options.path, options.windowName, options.windowOptions);\n        let oauthInterval = window.setInterval(async function(){\n            let json = await fetch(\"http://localhost:3000/auth/login/success\", {\n                method: \"GET\",\n                credentials: \"include\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  \"Access-Control-Allow-Credentials\": true\n                }\n              })\n            let result = await json.json()\n            if(result.user) {\n                window.clearInterval(oauthInterval);\n                options.callback();   \n                return  oauthWindow.close()\n            }\n           if(oauthWindow.closed){\n            \n            options.callback();   \n           }\n\n        }, 1000);\n    \n}\n"]},"metadata":{},"sourceType":"module"}