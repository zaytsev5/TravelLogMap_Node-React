{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport * as React from 'react';\nimport { createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport mapboxgl from '../utils/mapboxgl';\nimport BaseControl from './base-control';\nimport Marker from './marker';\nimport MapState from '../utils/map-state';\nimport TransitionManager from '../utils/transition-manager';\nimport { isGeolocationSupported } from '../utils/geolocate-utils';\nvar LINEAR_TRANSITION_PROPS = Object.assign({}, TransitionManager.defaultProps, {\n  transitionDuration: 500\n});\n\nvar noop = function noop() {};\n\nvar propTypes = Object.assign({}, BaseControl.propTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  label: PropTypes.string,\n  auto: PropTypes.bool,\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n  onGeolocate: PropTypes.func\n});\nvar defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  style: {},\n  label: 'Geolocate',\n  auto: false,\n  positionOptions: null,\n  fitBoundsOptions: null,\n  trackUserLocation: false,\n  showUserLocation: true,\n  onGeolocate: function onGeolocate() {}\n});\n\nvar GeolocateControl = function (_BaseControl) {\n  _inherits(GeolocateControl, _BaseControl);\n\n  var _super = _createSuper(GeolocateControl);\n\n  function GeolocateControl() {\n    var _this;\n\n    _classCallCheck(this, GeolocateControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      supportsGeolocation: false,\n      markerPosition: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_mapboxGeolocateControl\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_geolocateButtonRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_setupMapboxGeolocateControl\", function (supportsGeolocation) {\n      if (!supportsGeolocation) {\n        console.warn('Geolocation support is not available, the GeolocateControl will not be visible.');\n        return;\n      }\n\n      var controlOptions = {\n        showUserLocation: false\n      };\n      ['positionOptions', 'fitBoundsOptions', 'trackUserLocation'].forEach(function (prop) {\n        if (prop in _this.props && _this.props[prop] !== null) {\n          controlOptions[prop] = _this.props[prop];\n        }\n      });\n      var control = new mapboxgl.GeolocateControl(controlOptions);\n      _this._mapboxGeolocateControl = control;\n      control._watchState = 'OFF';\n      control._geolocateButton = _this._geolocateButtonRef.current;\n\n      if (control.options.trackUserLocation && control._geolocateButton) {\n        control._geolocateButton.setAttribute('aria-pressed', 'false');\n      }\n\n      control._updateMarker = _this._updateMarker;\n      control._updateCamera = _this._updateCamera;\n      control._setup = true;\n      var eventManager = _this._context.eventManager;\n\n      if (control.options.trackUserLocation && eventManager) {\n        eventManager.on('panstart', function () {\n          if (control._watchState === 'ACTIVE_LOCK') {\n            control._watchState = 'BACKGROUND';\n\n            control._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');\n\n            control._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');\n          }\n        });\n      }\n\n      control.on('geolocate', _this.props.onGeolocate);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_triggerGeolocate\", function () {\n      var control = _this._mapboxGeolocateControl;\n      control._map = _this._context.map;\n\n      if (_this.props.showUserLocation) {\n        control.on('geolocate', _this._updateMarker);\n        control.on('trackuserlocationend', _this._updateMarker);\n      }\n\n      return _this._mapboxGeolocateControl.trigger();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateMarker\", function (position) {\n      if (position) {\n        _this.setState({\n          markerPosition: position.coords\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getBounds\", function (position) {\n      var center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n      var radius = position.coords.accuracy;\n      var bounds = center.toBounds(radius);\n      return [[bounds._ne.lng, bounds._ne.lat], [bounds._sw.lng, bounds._sw.lat]];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateCamera\", function (position) {\n      var viewport = _this._context.viewport;\n\n      var bounds = _this._getBounds(position);\n\n      var _WebMercatorViewport$ = new WebMercatorViewport(viewport).fitBounds(bounds),\n          longitude = _WebMercatorViewport$.longitude,\n          latitude = _WebMercatorViewport$.latitude,\n          zoom = _WebMercatorViewport$.zoom;\n\n      var newViewState = Object.assign({}, viewport, {\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n      var mapState = new MapState(newViewState);\n      var viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n      var onViewportChange = _this.props.onViewportChange || _this._context.onViewportChange || noop;\n      var onViewStateChange = _this.props.onViewStateChange || _this._context.onViewStateChange || noop;\n      onViewStateChange({\n        viewState: viewState\n      });\n      onViewportChange(viewState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderButton\", function (type, label, callback) {\n      return React.createElement(\"button\", {\n        key: type,\n        className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n        ref: _this._geolocateButtonRef,\n        type: \"button\",\n        title: label,\n        onClick: callback\n      }, React.createElement(\"span\", {\n        className: \"mapboxgl-ctrl-icon\",\n        \"aria-hidden\": \"true\"\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderMarker\", function () {\n      var markerPosition = _this.state.markerPosition;\n      var showUserLocation = _this.props.showUserLocation;\n\n      if (!markerPosition || !showUserLocation) {\n        return null;\n      }\n\n      return React.createElement(Marker, {\n        key: \"location-maker\",\n        className: \"mapboxgl-user-location-dot\",\n        longitude: markerPosition.longitude,\n        latitude: markerPosition.latitude,\n        onContextMenu: function onContextMenu(e) {\n          return e.preventDefault();\n        },\n        captureDrag: false,\n        captureDoubleClick: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(GeolocateControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      isGeolocationSupported().then(function (result) {\n        _this2.setState({\n          supportsGeolocation: result\n        });\n\n        _this2._setupMapboxGeolocateControl(result);\n\n        if (result && _this2.props.auto) {\n          _this2._triggerGeolocate();\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.state.supportsGeolocation && !prevProps.auto && this.props.auto) {\n        this._triggerGeolocate();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._mapboxGeolocateControl) {\n        var geolocationWatchID = this._mapboxGeolocateControl._geolocationWatchID;\n\n        if (geolocationWatchID !== undefined) {\n          window.navigator.geolocation.clearWatch(geolocationWatchID);\n          this._mapboxGeolocateControl._geolocationWatchID = undefined;\n        }\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      if (!this.state.supportsGeolocation) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          style = _this$props.style,\n          label = _this$props.label;\n      return React.createElement(\"div\", null, this._renderMarker(), React.createElement(\"div\", {\n        key: \"geolocate-control\",\n        className: \"mapboxgl-ctrl mapboxgl-ctrl-group \".concat(className),\n        ref: this._containerRef,\n        style: style,\n        onContextMenu: function onContextMenu(e) {\n          return e.preventDefault();\n        }\n      }, this._renderButton('geolocate', label, this._triggerGeolocate)));\n    }\n  }]);\n\n  return GeolocateControl;\n}(BaseControl);\n\n_defineProperty(GeolocateControl, \"propTypes\", propTypes);\n\n_defineProperty(GeolocateControl, \"defaultProps\", defaultProps);\n\nexport { GeolocateControl as default };","map":null,"metadata":{},"sourceType":"module"}